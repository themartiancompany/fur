#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'git'
}

# shellcheck disable=SC2034
_global_variables() {
  package_manager=""
  installed_packages=()
  color=""
  quiet=""
}

# $@: packages
_fur() {
  local \
    _pkgmgr="${1}" \
    _packages=() \
    _pkgs=() \
    _pkgmgr_opts=() \
    _git_opts=() \
    _http \
    _ns \
    _pkg \
    _url
  shift \
    1
  _packages=(
    "$@"
  )
  _http="https://github.com"
  _ns="themartiancompany"
  _url="${_http}/${_ns}/fur"
  _msg_info \
    "installing ${_packages[*]}"
  _pkgmgr_opts+=(
    -U
    --overwrite="*"
    --noconfirm
  )
  _git_opts=(
    --single-branch
    --depth=1
  )
  for _pkg \
    in "${_packages[@]}"; do
    _repo="$( \
      mktemp \
        -d)"
    _opts=(
      "${_git_opts[@]}"
      --branch="${_pkg}"
    )
    cd \
      "${_repo}"
    git \
      clone \
        "${_opts[@]}" \
        "${_url}"
    _pkgs=(
      $( \
        find \
          . \
          -iname \
	    '*.pkg.*' \
	  -exec echo ${_repo}/{} ';')
    )
    _msg_info \
      "found ${_pkgs[*]}"
    _sigs=(
      $( \
        find \
          . \
          -iname \
	    '*.sig' \
	  -exec echo ${_repo}/{} ';')
    )
    _msg_info \
      "removing signatures ${_sigs[*]}"
    mv \
      "${_sigs[@]}" \
      .
    rm \
      *".sig"
    _pkgs=(
      $( \
        find \
          . | \
	  grep \
            "pkg")
    )
    _sigs=(
      $( \
        find \
	  . | \
	  grep \
	    "pkg")
    )
    _msg_info \
      "moving ${_pkgs[*]}"
    mv \
      "${_pkgs[@]}" \
      .
    rm \
      -rf \
      "${_sigs[@]}"
    _msg_info \
      "installing $( \
        basename \
          "${_pkgs[*]}")"
    "${_pkgmgr}" \
      "${_pkgmgr_opts[@]}" \
      $( \
        find \
	  . | \
	  grep \
	    "pkg")
    _pkgs=(
      $(ls \
	  *".pkg."*)
    )
    _msg_info \
      "installing ${_pkgs[*]}"
    "${_pkgmgr}" \
      "${_pkgmgr_opts[@]}" \
      "${_pkgs[@]}"
  done
  cd \
    "${OLDPWD}"
}

_get_package_manager() {
  local \
    _fallback_name="pacman" \
    _name \
    _pkgmgr
  _name="intep${_fallback_name}"
  _pkgmgr="$( \
    command \
      -v \
      "${_name}")"
  if [[ "${_pkgmgr}" == "" ]]; then
    _pkgmgr="$( \
      command \
        -v \
        "${_fallback_name}")"
  fi
  if [[ "${_pkgmgr}" == "" ]]; then
    _msg_error \
      "install either ${_name} or ${_fallback_name}"
  fi
  echo \
    "${_pkgmgr}"
}

# Set defaults and, if present, overrides
# from fur command line option parameters
_set_overrides() {
  _set_override \
    "package" \
    "manager" \
    "$(_get_package_manager)"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -p                   Package manager.
                          Default: $(_get "package" "manager")
     -c                   Colors.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'p:cvh?' \
    arg; do
  case \
    "${arg}" in
    p) override_package_manager="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
installed_packages=(
  $@
)
_config_user_init \
  "$(_get "app" "name")"
_fur \
  "$(_get \
       "package" \
       "manager")" \
  "${installed_packages[@]}"
