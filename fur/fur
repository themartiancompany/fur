#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'git'
}

# shellcheck disable=SC2034
_global_variables() {
  install_date=""
  package_manager=""
  installed_packages=()
  download_only=""
  target_platform=""
  target_arch=""
  repo_dir=""
  target_mirror=""
  color=""
  quiet=""
}

_pkgs_get() {
  mapfile \
    -d \
    $'\0' \
    _pkgs < \
    <(find \
        "${_repo}" \
        -iwholename \
          "*/${_platform}/*/*.pkg.*" \
        -type \
          "f" \
        -print0 || \
      true)
}

_sigs_get() {
  mapfile \
    -d \
    $'\0' \
    _sigs < \
    <(find \
        "${_repo}" \
	\( \
          -iwholename \
            "*.pkg.*.sig" \
          -o \
          -iwholename \
            "*.pkg.*.asc" \
	\) \
        -type \
          "f" \
        -print0 || \
      true)
}

_install_pkgs() {
  local \
    _pkgs=() \
    _sigs=() \
    _sig \
    _cmd=() \
    _pwd \
    _sig_verify \
    _msg=()
  _sig_verify="false"
  _pwd="$( \
    pwd)"
  if [[ "${_sig_verify}" == "false" ]]; then
    _sigs_get
    _msg=(
      "Removing all signatures '${_sigs[*]}'."
    )
    _msg_info \
      "${_msg[*]}"
    rm \
      -rf \
      "${_sigs[@]}" || \
      true
  fi 
  _pkgs_get
  _msg_info \
    "Found and moving packages '${_pkgs[*]}'."
  mv \
    "${_pkgs[@]}" \
    . || \
    _msg_info \
      "Error moving ${_pkgs[*]}."
  _pkgs=( $( \
    find \
      . \
      -maxdepth \
        "1" \
      -iname \
        "*.pkg.*" \
      -exec \
        realpath \
          {} \;)
  ) || \
    true
  _msg_info \
    "Installing ${_pkgs[*]}."
  _cmd=(
    "${_pkgmgr}"
      "${_pkgmgr_opts[@]}"
      "${_pkgs[@]}"
  )
  _msg_info \
    "Running '${_cmd[*]}'."
  if [[ "${quiet}" == "n" ]]; then
    "${_cmd[@]}"
  elif [[ "${quiet}" == "y" ]]; then
    "${_cmd[@]}" 2 &> \
      /dev/null
  fi
}

_http_mirror_get() {
  local \
    _domain="${1}" \
    _http \
    _ns \
    _url
  _http="https://${_domain}.com"
  _ns="themartiancompany"
  _url="${_http}/${_ns}/fur"
  echo \
    "${_url}"
}

# $@: packages
_fur() {
  local \
    _platform="${1}" \
    _arch="${2}" \
    _pkgmgr="${3}" \
    _noinstall="${4}" \
    _repo="${5}" \
    _mirror="${6}" \
    _packages=() \
    _pkgs=() \
    _pkgmgr_opts=() \
    _clone_opts=() \
    _git_opts=() \
    _pkg \
    _url \
    _msg=()
  shift \
    6
  _packages=(
    "$@"
  )
  _url="$( \
    _http_mirror_get \
      "${_mirror}")"
  _msg=(
    "Installing ${_packages[*]}."
  )
  _msg_info \
    "${_msg[*]}"
  _pkgmgr_opts+=(
    $(_get_pkgmgr_opts \
        "${_pkgmgr}")
  )
  if [[ "${quiet}" == "y" ]]; then
    _clone_opts+=(
      --quiet
    )
  fi
  _clone_opts+=(
    --single-branch
    --depth=1
  )
  for _pkg \
    in "${_packages[@]}"; do
    if [[ "${_noinstall}" == "false" ]]; then
      _repo="$( \
        mktemp \
          -d)"
    fi
    _git_opts+=(
      "${_clone_opts[@]}"
      --branch="${_pkg}"
    )
    cd \
      "${_repo}"
    _msg_info \
      "Cloning from ${_url}."
    git \
      clone \
        "${_git_opts[@]}" \
        "${_url}"
    # hi if
    if [[ "${_noinstall}" != "true" ]]; then
      _install_pkgs
    fi
  done
  cd \
    "${OLDPWD}"
}

_get_package_manager() {
  local \
    _fallback_name="pacman" \
    _name \
    _pkgmgr
  _name="intep${_fallback_name}"
  _pkgmgr="$( \
    command \
      -v \
      "${_name}")"
  if [[ "${_pkgmgr}" == "" ]]; then
    _pkgmgr="$( \
      command \
        -v \
        "${_fallback_name}")"
  fi
  if [[ "${_pkgmgr}" == "" ]]; then
    _msg_error \
      "install either ${_name} or ${_fallback_name}"
  fi
  echo \
    "${_pkgmgr}"
}

_get_pkgmgr_opts() {
  local \
    _pkgmgr="${1}" \
    _name \
    _opts=()
  _name="$( \
    basename \
      "${_pkgmgr}")"
  if [[ "${_name}" == "inteppacman" ]]; then
    _opts+=(
      --
    )
  fi
  _opts+=(
    -U
    --overwrite="*"
    --noconfirm
  )
  echo \
    "${_opts[@]}"
}

_platform_auto_detect() {
  local \
    _platform="arch" \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]] || \
     [[ -v "TERMUX_VERSION" ]]; then
    _platform="termux"
  fi
  echo \
    "${_platform}"
}

# Set defaults and, if present, overrides
# from fur command line option parameters
_set_overrides() {
  local \
    _msg=()
  _set_override \
    "install" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "platform" \
    "$(_platform_auto_detect)"
  _set_override \
    "target" \
    "arch" \
    "$(uname \
         -m)"
  _set_override \
    "package" \
    "manager" \
    "inteppacman"
    # TODO:
    # produce a working pacman which can be
    # run as root (see pacman-root-ur tmc repo)
    # "$(_get_package_manager)"
  _set_override \
    "repo" \
    "dir" \
    "${HOME}"
  _set_override \
    "download" \
    "only" \
    "false"
  _set_override \
    "target" \
    "mirror" \
    "github"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ "${installed_packages[*]}" == "" ]]; then
    installed_packages+=(
      "$(basename \
        "$(realpath \
          "$(pwd)")")"
    )
    _msg=(
      "No input package given,"
      "installing ${installed_packages[*]}."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Install date:   ${install_date}"
  _msg_info "          Target platform:   ${target_platform}"
  _msg_info "      Target architecture:   ${target_arch}"
  _msg_info "          Package manager:   ${package_manager}"
  _msg_info "          Package manager:   ${package_manager}"
  _msg_info "            Download only:   ${download_only}"
  _msg_info "           Repo directory:   ${repo_dir}"
  _msg_info "            Target mirror:   ${target_mirror}"
  _msg_info " To be installed packages:   ${installed_packages[*]}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Usage:
  ${app_name}
    [options]
    [packages]
  options:
     -p <package_manager>   Package manager.
                            Default: ${package_manager}
     -d                     Download only (noinstall).
                            Default: ${download_only}
     -w <repo_dir>          Directory containing the fur tree.
                            To be set when download only is true,
			    otherwise is temporary.
                            Default: ${repo_dir}
     -P <platform>          Platform for which to retrieve packages,
                            can be 'arch' or 'termux'.
                            Default: ${target_platform}
     -A <architecture>      Architecture for which to retrieve packages,
                            can be 'any', 'arm' or 'x86_64'.
                            Default: ${target_arch}
     -m <mirror>            Fur mirror, can be 'github' or
                            'gitlab'.
                            Default: ${target_mirror}


     -c                     Colors.
     -h                     This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'P:A:p:dw:m:cvh?' \
    arg; do
  case \
    "${arg}" in
    P) override_target_platform="${OPTARG}" ;;
    A) override_target_arch="${OPTARG}" ;;
    p) override_package_manager="${OPTARG}" ;;
    d) override_download_only="true" ;;
    w) override_repo_dir="${OPTARG}" ;;
    m) override_target_mirror="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
installed_packages=(
  $@
)
_set_overrides
_config_user_init \
  "${app_name}"
_show_config
app_opts=(
  "${target_platform}"
  "${target_arch}"
  "${package_manager}"
  "${download_only}"
  "${repo_dir}"
  "${target_mirror}"
  "${installed_packages[@]}"
)
_fur \
  "${app_opts[@]}"
