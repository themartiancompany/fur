#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'git'
}

# shellcheck disable=SC2034
_global_variables() {
  install_date=""
  package_manager=""
  installed_packages=()
  download_only=""
  repo_dir=""
  color=""
  quiet=""
}

_install_pkgs() {
  _pkgs=(
    $( \
      find \
        . \
        -iname \
          '*.pkg.*' \
        -exec echo ${_repo}/{} ';')
  )
  _msg_info \
    "found ${_pkgs[*]}"
  _sigs=(
    $( \
      find \
        . \
        -iname \
          '*.sig' \
        -exec echo ${_repo}/{} ';')
  )
  _msg_info \
    "removing signatures ${_sigs[*]}"
  mv \
    "${_sigs[@]}" \
    .
  rm \
    *".sig"
  _pkgs=(
    $( \
      find \
        . | \
        grep \
          "pkg")
  )
  _sigs=(
    $( \
      find \
        . | \
        grep \
          "pkg")
  )
  _msg_info \
    "moving ${_pkgs[*]}"
  mv \
    "${_pkgs[@]}" \
    .
  rm \
    -rf \
    "${_sigs[@]}"
  _msg_info \
    "installing $( \
      basename \
        "${_pkgs[*]}")"
  "${_pkgmgr}" \
    "${_pkgmgr_opts[@]}" \
    $( \
      find \
        . | \
        grep \
          "pkg")
  _pkgs=(
    $(ls \
        *".pkg."*)
  )
  _msg_info \
    "installing ${_pkgs[*]}"
  "${_pkgmgr}" \
    "${_pkgmgr_opts[@]}" \
    "${_pkgs[@]}"
}

# $@: packages
_fur() {
  local \
    _pkgmgr="${1}" \
    _noinstall="${2}" \
    _repo="${3}" \
    _packages=() \
    _pkgs=() \
    _pkgmgr_opts=() \
    _git_opts=() \
    _http \
    _ns \
    _pkg \
    _url
  shift \
    3
  _packages=(
    "$@"
  )
  _http="https://github.com"
  _ns="themartiancompany"
  _url="${_http}/${_ns}/fur"
  _msg_info \
    "installing ${_packages[*]}"
  _pkgmgr_opts+=(
    $(_get_pkgmgr_opts \
        "${_pkgmgr}")
  )
  _git_opts=(
    --single-branch
    --depth=1
  )
  for _pkg \
    in "${_packages[@]}"; do
    if [[ "${_noinstall}" != "true" ]]; then
      _repo="$( \
        mktemp \
          -d)"
    fi
    _opts=(
      "${_git_opts[@]}"
      --branch="${_pkg}"
    )
    cd \
      "${_repo}"
    git \
      clone \
        "${_opts[@]}" \
        "${_url}"
    # hi if
    if [[ "${_noinstall}" != "true" ]]; then
      _install_pkgs
    fi
  done
  cd \
    "${OLDPWD}"
}

_get_package_manager() {
  local \
    _fallback_name="pacman" \
    _name \
    _pkgmgr
  _name="intep${_fallback_name}"
  _pkgmgr="$( \
    command \
      -v \
      "${_name}")"
  if [[ "${_pkgmgr}" == "" ]]; then
    _pkgmgr="$( \
      command \
        -v \
        "${_fallback_name}")"
  fi
  if [[ "${_pkgmgr}" == "" ]]; then
    _msg_error \
      "install either ${_name} or ${_fallback_name}"
  fi
  echo \
    "${_pkgmgr}"
}

_get_pkgmgr_opts() {
  local \
    _pkgmgr="${1}" \
    _name \
    _opts=()
  _name="$( \
    basename \
      "${_pkgmgr}")"
  if [[ "${_name}" == "inteppacman" ]]; then
    _opts+=(
      --
    )
  fi
  _opts+=(
    -U
    --overwrite="*"
    --noconfirm
  )
  echo \
    "${_opts[@]}"
}

# Set defaults and, if present, overrides
# from fur command line option parameters
_set_overrides() {
  _set_override \
    "install" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "package" \
    "manager" \
    "pacman"
    # TODO:
    # produce a working pacman which can be
    # run as root (see pacman-root-ur tmc repo)
    # "$(_get_package_manager)"
  _set_override \
    "repo" \
    "dir" \
    "${HOME}"
  _set_override \
    "download" \
    "only" \
    "false"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Install date:   $(_get "install" "date")"
  _msg_info "          Package manager:   $(_get "package" "manager")"
  _msg_info "            Download only:   $(_get "download" "only")"
  _msg_info "           Repo directory:   $(_get "repo" "dir")"
  _msg_info " To be installed packages:   ${installed_packages[*]}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -p <package_manager>   Package manager.
                            Default: $(_get "package" "manager")
     -d                     Download only (noinstall).
                            Default: $(_get "download" "only")
     -w <repo_dir>          Directory containing the fur tree.
                            To be set when download only is true,
			    otherwise is temporary.
                            Default: $(_get "repo" "dir")
     -c                     Colors.
     -h                     This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'p:dw:cvh?' \
    arg; do
  case \
    "${arg}" in
    p) override_package_manager="${OPTARG}" ;;
    d) override_download_only="true" ;;
    w) override_repo_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
installed_packages=(
  $@
)
_set_overrides
_config_user_init \
  "$(_get "app" "name")"
_show_config
app_opts=(
  "$(_get \
       "package" \
       "manager")"
  "$(_get \
       "download" \
       "only")"
  "$(_get \
       "repo" \
       "dir")"
  "${installed_packages[@]}"
)
_fur \
  "${app_opts[@]}"
