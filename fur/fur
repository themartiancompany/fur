#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'git'
  _check_cmd \
    'find' \
    'findutils'
}

# shellcheck disable=SC2034
_global_variables() {
  install_date=""
  package_manager=""
  dependencies_check=""
  dependencies_resolve=""
  installed_packages=()
  download_only=""
  target_platform=""
  target_arch=""
  repo_dir=""
  sig_dir=""
  target_mirror=""
  target_namespace=""
  repo_name=""
  mirror_type=""
  git_protocol=""
  output_dir=""
  color=""
  quiet=""
}

_pkgs_get() {
  local \
    _dir="${1}"
  mapfile \
    -d \
    $'\0' \
    _pkgs < \
    <(find \
        "${_dir}" \
        \( \
          -iwholename \
            "*/${_platform}/*/*.pkg.*" \
          -a \
        ! -iwholename \
            "*/${_platform}/*/*.pkg.*.sig" \
	\) \
        -type \
          "f" \
        -print0 || \
      true)
  #_array_set \
  #  "_pkgs" \
  #  "_pkgs_set"
  #echo \
  #  "${_pkgs_set[@]}"
  #_pkgs=(
  #  "${_pkgs_set[@]}"
  #)
}

_sigs_get() {
  local \
    _dir="${1}"
  mapfile \
    -d \
    $'\0' \
    _sigs < \
    <(find \
        "${_dir}" \
        \( \
          -iwholename \
            "*.pkg.*.sig" \
          -o \
          -iwholename \
            "*.pkg.*.asc" \
        \) \
        -type \
          "f" \
        -print0 || \
      true)
}

_install_pkgs() {
  local \
    _repo_dir="${1}" \
    _sig_dir="${2}" \
    _pkgs=() \
    _sigs=() \
    _sig \
    _cmd=() \
    _pwd \
    _sig_verify \
    _msg=()
  _sig_verify="false"
  _pwd="$( \
    pwd)"
  _msg=(
    "Installing downloaded packages."
  )
  _msg_info \
    "${_msg[*]}"
  _sigs_get \
    "${_repo_dir}"
  if [[ "${_sigs[*]}" == "" ]]; then
    _msg=(
      "Found no signatures."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_sig_verify}" == "false" ]]; then
    _msg=(
      "Signature verification disabled,"
      "removing all signatures '${_sigs[*]}'."
    )
    _msg_info \
      "${_msg[*]}"
    rm \
      -rf \
      "${_sigs[@]}" || \
      true
  fi
  _pkgs=( $( \
    find \
      "${_repo_dir}" \
      -maxdepth \
        "1" \
      -iname \
        "*.pkg.tar*" \
      -exec \
        realpath \
          '{}' \;)
  ) || \
  true
  _msg=(
    "Installing ${_pkgs[*]}."
  )
  _msg_info \
    "${_msg[*]}"
  _cmd=(
    "${_pkgmgr}"
      "${_pkgmgr_opts[@]}"
      "${_pkgs[@]}"
  )
  _msg_info \
    "Running '${_cmd[*]}'."
  if [[ "${quiet}" == "n" ]]; then
    "${_cmd[@]}"
  elif [[ "${quiet}" == "y" ]]; then
    "${_cmd[@]}" 2 &> \
      /dev/null
  fi
}

_mirror_get() {
  local \
    _domain="${1}" \
    _namespace="${2}" \
    _protocol="${3}" \
    _location \
    _url
  if [[ "${_protocol}" == "http" ]]; then
    _location="https://${_domain}.com/"
  elif [[ "${_protocol}" == "ssh" ]]; then
    _location="${_domain}:"
  fi
  _url="${_location}${_namespace}/${_repo_name}"
  echo \
    "${_url}"
}

_file_hash() {
  local \
    _file="${1}"
  sha256sum \
    "${_file}" | \
    awk \
      '{print $1}'
}

_depend_available_get() {
  local \
    _depend="${1}" \
    _msg=()
  _msg=(
    "Package '${_depend}'"
    "not installed,"
    "checking if available"
    "in default"
    "repositories."
  )
  _msg_info \
    "${_msg[*]}"
  _available="$( \
    pacman \
      -Si \
      "${_depend}" \
      2>/dev/null || \
    true)"
}

_install_pkg_repo() {
  local \
    _pkg="${1}" \
    _msg=() \
    _cmd=()
    _pkgmgr_depends_opts=()
  _msg=(
    "The package is available"
    "in default binary repositories,"
    "installing it."
  )
  _pkgmgr_depends_opts+=(
    $(_pkgmgr_depends_opts_get \
        "${_pkgmgr}")
  )
  _cmd=(
    "${_pkgmgr}"
      "${_pkgmgr_depends_opts[@]}"
      "${_pkg}"
  )
  "${_cmd[@]}"
}

_pkg_installed_get() {
  local \
    _pkg="${1}" \
    _msg=()
  msg=(
    "Checking unretrieved"
    "depend '${_depend}'."
  )
  _msg_info \
    "${_msg[*]}"
  _installed="$( \
    pacman \
      -Q \
      "${_depend}" 2>/dev/null || \
    true)"
}

_depend_retrieved_get() {
  local \
    _depend="${1}"
  if [[ " ${_depends_retrieved[*]} " != *" ${_depend} "* ]]; then
    _depend_retrieved="false"
  else
    _depend_retrieved="true"
  fi
}

_depend_resolve() {
  local \
    _depend="${1}" \
    _available \
    _depend_retrieved \
    _installed \
    _msg=()
  _depend_retrieved_get \
    "${_depend}"
  if [[ "${_depend_retrieved}" == "true" ]]; then
    _msg=(
      "Dependency '${_depend}' already retrieved."
    )
    _msg_info \
      "${_msg[*]}"
  elif [[ "${_depend_retrieved}" == "false" ]]; then
    _pkg_installed_get \
      "${_depend}"
    if [[ "${_installed}" == "" ]]; then
      _depend_available_get \
        "${_depend}"
      if [[ "${_available}" != "" ]]; then
        _install_pkg_repo \
          "${_depend}"
      elif [[ "${_available}" == "" ]]; then
        if [[ " ${_depends_retrieved[*]} " != *" ${_depend} "* ]]; then
          _msg=(
            "Looking for unretrievable"
            "binary package '${_depend}' on"
            "the fur."
          )
          _msg_info \
            "${_msg[*]}"
          _packages_to_retrieve+=(
            "${_depend}"
          )
          if [[ "${_mirror_type}" == "tree" ]]; then 
            _fur_git_get \
              "${_depend}" \
              "${_target_mirror}" \
              "${_repo_dir}"
          elif [[ "${_mirror_type}" == "ci" ]]; then 
            _fur_ci_get \
              "${_depend}" \
              "${_target_mirror}" \
              "${_repo_dir}"
          else
            _msg=(
              "Unknown mirror type"
              "'${_mirror_type}'."
            )
            _msg_error \
              "${_msg[*]}"
          fi
        elif [[ " ${_depends_retrieved[*]} " == *" ${_depend} "* ]]; then
          _msg=(
            "Package '${_depend}'"
            "already retrieved."
          )
          _msg_info \
            "${_msg[*]}"
        fi
      fi
    elif [[ "${_installed}" != "" ]]; then
      _package_retrieved \
        "${_depend}"
    fi
  fi
}

_depends_check() {
  local \
    _pkg="${1}" \
    _depend \
    _depends_string \
    _depends=()
  _depends_string="$( \
    package-info-get \
      "${_pkg}" \
      "depend")"
  IFS=$'\n' \
  read \
    -r \
    -d \
      '' \
    -a \
    _depends <<< \
    "$_depends_string" || \
  true
  for _depend in "${_depends[@]}"; do
    _depend_resolve \
      "${_depend}"
  done
}

_package_retrieved() {
  local \
    _pkg="${1}" \
    _array=() \
    _remaining \
    _msg=()
  for _remaining in "${_packages_to_retrieve[@]}"; do
    if [[ "${_remaining}" != "${_pkgname}" ]]; then
      _array+=(
        "${_remaining}"
      )
    elif [[ "${_remaining}" == "${_pkgname}" ]]; then
      _msg=(
        "Package '${_pkg}' retrieved."
      )
      _msg_info \
        "${_msg[*]}"
    fi
  done
  _packages_to_retrieve=(
    "${_array[@]}"
  )
  if [[ "${_packages_to_retrieve[*]}" != "" ]]; then
    _msg=(
      "Left '${_packages_to_retrieve[@]}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_fur_git_get() {
  local \
    _pkg="${1}" \
    _mirror="${2}" \
    _repo_dir="${3}" \
    _git_opts=() \
    _clone_opts=() \
    _url \
    _pkgs=() \
    _pkgs_set=() \
    _oldpwd \
    _dir \
    _pkgname \
    _msg=()
  if [[ "${quiet}" == "y" ]]; then
    _clone_opts+=(
      --quiet
    )
  fi
  _msg=(
    "Downloading '${_pkg}'."
    "Remaining packages '${_packages_to_retrieve[@]}'"
  )
  _msg_info \
    "${_msg[*]}"
  _clone_opts+=(
    --single-branch
    --depth=1
  )
  _git_opts+=(
    "${_clone_opts[@]}"
    --branch="${_pkg}"
  )
  _url="$( \
    _mirror_get \
      "${_mirror}" \
      "${_target_namespace}" \
      "${_git_protocol}")"
  _oldpwd="$( \
    pwd)"
  cd \
    "${_repo_dir}"
  if [[ -e "fur" ]]; then
    _msg=(
      "Fur directory exists"
      "already in '${_repo_dir}',"
      "deleting."
    )
    _msg_info \
      "${_msg[*]}"
    rm \
      -rf \
      "fur"
  fi
  git \
    clone \
      "${_git_opts[@]}" \
      "${_url}" \
      "fur"
  _depends_retrieved+=(
    "${_pkg}"
  )
  _msg=(
    "Removing extra platforms."
  )
  _msg_info \
    "${_msg[*]}"
  for _dir in "fur/"*; do
    if [[ ! -d "${_dir}" || \
          "$(basename \
            "${_dir}")" != "${_platform}" ]]; then
      rm \
        -rf \
        "${_dir}"
    fi
  done
  _sigs_get \
    "${_repo_dir}/fur"
  if [[ "${_sigs[*]}" == "" ]]; then
    _msg=(
      "Found no signatures"
      "into '${_repo_dir}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _msg=(
    "Found and moving signatures '${_sigs[*]}'"
    "into '${_repo_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  for _sig in "${_sigs[@]}"; do
    mv \
      "${_sig}" \
      "${_repo_dir}" || ( \
      _msg=(
        "Error moving '${_sig}' into"
        "'${_repo_dir}'."
      ) && \
      _msg_error \
        "${_msg[*]}" \
        0 )
  done
  _pkgs_get \
    "${_repo_dir}/fur"
  if [[ "${_pkgs[*]}" == "" ]]; then
    _msg=(
      "Found no packages."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _msg=(
    "Found and moving packages '${_pkgs[*]}'"
    "into '${_repo_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  for _pkg in "${_pkgs[@]}"; do
    _pkgname="$( \
      package-info-get \
        "${_pkg}" \
        "pkgname")"
    _msg=(
      "Found and moving package '${_pkg}'"
      "into '${_repo_dir}'."
    )
    _msg_info \
      "${_msg[*]}"
    mv \
      -v \
      "${_pkg}" \
      "${_repo_dir}" || ( \
      _msg=(
        "Error moving '${_pkg}' into"
        "'${_repo_dir}'."  
      ) && \
      _msg_error \
        "${_msg[*]}" \
        1 )
  done
  for _pkg in "${_pkgs[@]}"; do
    _pkg_file="${_repo_dir}/$( \
      basename \
        "${_pkg}")"
    _pkgname="$( \
      package-info-get \
        "${_pkg_file}" \
        "pkgname")"
    _package_retrieved \
      "${_pkgname}"
    tree \
      "${_repo_dir}"
    _depends_check \
     "${_repo_dir}/$( \
       basename \
         "${_pkg}")"
  done
  cd \
    "${_oldpwd}"
  rm \
    -rf \
    "${_repo_dir}/fur"
}

_fur_ci_get() {
  local \
    _pkg="${1}" \
    _target_mirror="${2}" \
    _repo_dir="${3}"
  if [[ "${_target_mirror}" == "github" ]]; then
    _fur_github_release_get \
      "${_pkg}" \
      "${_repo_dir}"
  fi
}

_fur_github_release_get() {
  local \
    _pkg="${1}" \
    _repo_dir="${2}" \
    _msg=()
  _msg=(
    "Retrieving binary package"
    "'${_pkg}' from Gur"
    "releases."
  )
  _msg_info \
    "${_msg[*]}"
  gh-dl \
    ""

  exit \
    1
}

# $@: packages
_fur() {
  local \
    _platform="${1}" \
    _arch="${2}" \
    _pkgmgr="${3}" \
    _noinstall="${4}" \
    _repo_dir="${5}" \
    _sig_dir="${6}" \
    _target_mirror="${7}" \
    _target_namespace="${8}" \
    _repo_name="${9}" \
    _mirror_type="${10}" \
    _git_protocol="${11}" \
    _dependencies_check="${12}" \
    _dependencies_resolve="${13}" \
    _output_dir="${14}" \
    _packages=() \
    _packages_to_retrieve=() \
    _depends_retrieved=() \
    _pkgs=() \
    _pkgmgr_opts=() \
    _clone_opts=() \
    _git_opts=() \
    _pkg \
    _url \
    _msg=()
  shift \
    14
  _packages=(
    "$@"
  )
  _msg=(
    "Installing ${_packages[*]}."
  )
  _msg_info \
    "${_msg[*]}"
  _pkgmgr_opts+=(
    $(_pkgmgr_opts_get \
        "${_pkgmgr}")
  )
  _packages_to_retrieve+=(
    "${_packages[@]}"
  )
  while \
    (( "${#_packages_to_retrieve[@]}" > 0 )); do
    _package="${_packages_to_retrieve[0]}"
    _fur_git_get \
      "${_package}" \
      "${_target_mirror}" \
      "${_repo_dir}"
    _packages_to_retrieve=()
    for _pkg in "${_packages[@]}"; do
      if [[ "${_pkg}" != "${_package}" ]]; then
        _packages_to_retrieve+=(
          "${_pkg}"
        )
      fi
    done
  done
  # for _pkg \
  #   in "${_packages[@]}"; do
    # if [[ "${_noinstall}" == "false" ]]; then
    #   _repo_dir="$( \
    #     mktemp \
    #       -d)"
    # fi
  # done
  if [[ "${_noinstall}" == "false" ]]; then
    _install_pkgs \
      "${_repo_dir}" \
      "${_sig_dir}"
  fi
  cd \
    "${OLDPWD}"
}

_pkgmgr_depends_opts_get() {
  local \
    _pkgmgr="${1}" \
    _name \
    _opts=()
  _name="$( \
    basename \
      "${_pkgmgr}")"
  if [[ "${_name}" == "inteppacman" ]]; then
    if [[ "${quiet}" == "n" ]]; then
      _opts+=(
        -v
      )
    fi
    _opts+=(
      --
    )
  fi
  if [[ "${_dependencies_check}" == "y" ]]; then
    _opts+=(
      -S
    )
  elif [[ "${_dependencies_check}" == "n" ]]; then
    _opts+=(
      -Sdd
    )
  fi
  _opts+=(
    --overwrite="*"
    --noconfirm
  )
  echo \
    "${_opts[@]}"
}

_pkgmgr_opts_get() {
  local \
    _pkgmgr="${1}" \
    _name \
    _opts=()
  _name="$( \
    basename \
      "${_pkgmgr}")"
  if [[ "${_name}" == "inteppacman" ]]; then
    if [[ "${quiet}" == "n" ]]; then
      _opts+=(
        -v
      )
    fi
    _opts+=(
      --
    )
  fi
  if [[ "${_dependencies_check}" == "y" ]]; then
    _opts+=(
      -U
    )
  elif [[ "${_dependencies_check}" == "n" ]]; then
    _opts+=(
      -Udd
    )
  fi
  _opts+=(
    --overwrite="*"
    --noconfirm
  )
  echo \
    "${_opts[@]}"
}

_platform_auto_detect() {
  local \
    _platform \
    _os
  _platform="arch"
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]] || \
     [[ -v "TERMUX_VERSION" ]]; then
    _platform="termux"
  fi
  _set_override \
    "target" \
    "platform" \
    "${_platform}"
}

_output_dir_auto_detect() {
  local \
    _output_dir
  _output_dir="${HOME}/.cache/fur/packages"
  mkdir \
    -p \
    "${_output_dir}"
  _set_override \
    "output" \
    "dir" \
    "${_output_dir}"
}

_repo_dir_auto_detect() {
  local \
    _repo_dir
  _repo_dir="${HOME}/.cache/fur/packages"
  if [[ -e "${_repo_dir}" ]]; then
    mkdir \
      -p \
      "${_repo_dir}"
  fi
  _set_override \
    "repo" \
    "dir" \
    "${_repo_dir}"
}

_package_manager_auto_detect() {
  local \
    _package_manager
  _package_manager="$( \
    command \
      -v \
      "inteppacman" || \
    true)"
  if [[ "${_package_manager}" == "" ]]; then
    _package_manager="pacman"
  fi
  _set_override \
    "package" \
    "manager" \
    "${_package_manager}"
}

# Set defaults and, if present, overrides
# from fur command line option parameters
_set_overrides() {
  local \
    _msg=()
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "install" \
    "date" \
    "$(_get_date_human)"
  _platform_auto_detect
  _set_override \
    "target" \
    "arch" \
    "$(uname \
         -m)"
  _package_manager_auto_detect
  # TODO:
  # produce a working pacman which can be
  # run as root (see pacman-root-ur tmc repo)
  _repo_dir_auto_detect
  _set_override \
    "download" \
    "only" \
    "false"
  _set_override \
    "target" \
    "mirror" \
    "github"
  _set_override \
    "target" \
    "namespace" \
    "themartiancompany"
  _set_override \
    "repo" \
    "name" \
    "fur"
  _set_override \
    "mirror" \
    "type" \
    "tree"
  _set_override \
    "git" \
    "protocol" \
    "http"
  _set_override \
    "dependencies" \
    "check" \
    "y"
  _set_override \
    "dependencies" \
    "resolve" \
    "y"
  _output_dir_auto_detect
  if [[ "${installed_packages[*]}" == "" ]]; then
    installed_packages+=(
      "$(basename \
        "$(realpath \
          "$(pwd)")")"
    )
    _msg=(
      "No input package given,"
      "installing ${installed_packages[*]}."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Install date:   ${install_date}"
  _msg_info "          Target platform:   ${target_platform}"
  _msg_info "      Target architecture:   ${target_arch}"
  _msg_info "          Package manager:   ${package_manager}"
  _msg_info "              Mirror type:   ${mirror_type}"
  _msg_info "       Dependencies check:   ${dependencies_check}"
  _msg_info "   Dependencies resolving:   ${dependencies_resolve}"
  _msg_info "            Download only:   ${download_only}"
  _msg_info "           Repo directory:   ${repo_dir}"
  _msg_info "     Signatures directory:   ${sig_dir}"
  _msg_info "            Target mirror:   ${target_mirror}"
  _msg_info "         Target namespace:   ${target_namespace}"
  _msg_info "          Repository name:   ${repo_name}"
  _msg_info "         Output directory:   ${output_dir}"
  _msg_info " To be installed packages:   ${installed_packages[*]}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Fallback User Repository.

Usage:

  ${app_name}
    [options]
    [packages]

  options:
     -p <package_manager>   Package manager.
                            Default: ${package_manager}
     -d                     Download only (noinstall).
                            Default: ${download_only}
     -w <repo_dir>          Directory containing the fur tree.
                            To be set when download only is true,
                            otherwise is temporary.
                            Default: ${repo_dir}
     -K <sig_dir>           Signatures keys directory.
                            Default: ${sig_dir}
     -P <platform>          Platform for which to retrieve packages,
                            can be 'arch' or 'termux'.
                            Default: ${target_platform}
     -A <architecture>      Architecture for which to retrieve packages,
                            can be 'any', 'arm' or 'x86_64'.
                            Default: ${target_arch}
     -m <mirror>            Fur mirror, can be 'github' or
                            'gitlab'.
                            Default: ${target_mirror}
     -t <mirror_type>       It can be 'tree'.
                            Default: ${mirror_type}
     -L <git_protocol>      Git protocol. It can be 'http' or 'ssh'.
                            Default: ${git_protocol}
     -l <repo_name>         Repository name on the mirror.
                            Default: ${repo_name}
     -n <namespace>         Repository namespace on the mirror.
                            Default: ${target_namespace}
     -D <y/n>               Whether to check for package
                            dependencies.
                            Default: ${dependencies_check}
     -R <y/n>               Resolve missing dependencies.
                            Default: ${dependencies_resolve}
     -o <output_dir>        Output directory.
                            Default: ${output_dir}

     -c                     Colors.
     -h                     This message.
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'P:A:p:dw:K:m:l:n:t:L:D:R:o:cvh?' \
    arg; do
  case \
    "${arg}" in
    P) override_target_platform="${OPTARG}" ;;
    A) override_target_arch="${OPTARG}" ;;
    p) override_package_manager="${OPTARG}" ;;
    d) override_download_only="true" ;;
    w) override_repo_dir="${OPTARG}" ;;
    K) override_sig_dir="${OPTARG}" ;;
    m) override_target_mirror="${OPTARG}" ;;
    l) override_repo_name="${OPTARG}" ;;
    n) override_target_namespace="${OPTARG}" ;;
    t) override_mirror_type="${OPTARG}" ;;
    L) override_git_protocol="${OPTARG}" ;;
    D) override_dependencies_check="${OPTARG}" ;;
    R) override_dependencies_resolve="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?)
      _set_overrides && \
      _usage \
        0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'." \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
installed_packages=(
  "$@"
)
_config_user_init \
  "${app_name}"
_set_overrides
_show_config
app_opts=(
  "${target_platform}"
  "${target_arch}"
  "${package_manager}"
  "${download_only}"
  "${repo_dir}"
  "${sig_dir}"
  "${target_mirror}"
  "${target_namespace}"
  "${repo_name}"
  "${mirror_type}"
  "${git_protocol}"
  "${dependencies_check}"
  "${dependencies_resolve}"
  "${output_dir}"
  "${installed_packages[@]}"
)
_fur \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
